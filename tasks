1)
class StringProcessor:
    def __init__(self):
        self.text = ""

    def getString(self):
        self.text = input("Enter a string: ")

    def printString(self):
        print(self.text.upper())

processor = StringProcessor()
processor.getString()
processor.printString()
2)
class Shape:
    def area(self):
        return 0

class Square(Shape):
    def __init__(self):
        self.length = float(input("Enter the length: "))

    def area(self):
        return self.length ** 2

shape = Shape()
print("Area:", shape.area())  

square = Square()
print("Area of square:", square.area())  
3)
class Shape:
    def area(self):
        return 0

class Rectangle(Shape):
    def __init__(self):
        self.length = float(input("Length: "))
        self.width = float(input("Width: "))

    def area(self):
        return self.length * self.width

rectangle = Rectangle()
print("Area of the rectangle:", rectangle.area())  
4)
import math

class Point:
    def __init__(self):
        self.x = float(input("Input x coordinate: "))
        self.y = float(input("Input y coordinate: "))

    def show(self):
        print(f"Coordinates of point: ({self.x}, {self.y})")

    def move(self, new_x, new_y):
        self.x = new_x
        self.y = new_y

    def dist(self, other_point):
        return math.sqrt((self.x - other_point.x) ** 2 + (self.y - other_point.y) ** 2)


p1 = Point()
p2 = Point()

p1.show()
p2.show()

print("Distance:", p1.dist(p2))


new_x = float(input("Enter new x for p1: "))
new_y = float(input("Enter new y for p1: "))
p1.move(new_x, new_y)
p1.show()
5)
class Account:
    def __init__(self):
        self.owner = input("Enter account owner's name: ")
        self.balance = float(input("Enter initial balance: "))

    def deposit(self):
        amount = float(input("Enter deposit amount: "))
        if amount > 0:
            self.balance += amount
            print(f"Deposited: {amount}. New balance: {self.balance}")
        else:
            print("Deposit amount must be positive.")

    def withdraw(self):
        amount = float(input("Enter withdrawal amount: "))
        if amount > self.balance:
            print("Insufficient funds! Withdrawal denied.")
        elif amount > 0:
            self.balance -= amount
            print(f"Withdrew: {amount}. New balance: {self.balance}")
        else:
            print("Withdrawal amount must be positive.")

acc = Account()


acc.deposit()
acc.withdraw()
acc.withdraw()
acc.deposit()
6)
def is_prime(n):
    if n < 2:
        return False
    return all(n % i != 0 for i in range(2, int(n**0.5) + 1))

numbers = list(map(int, input("Enter numbers : ").split()))

prime_numbers = list(filter(lambda x: is_prime(x), numbers))

print("Prime numbers:", prime_numbers)
#task 1
def grams_to_ounces(grams):
    return 28.3495231 * grams
#task 2
def fahrenheit_to_celsius(fahrenheit):
    return (5 / 9) * (fahrenheit - 32)
# Task 3
def solve(numheads, numlegs):
    for chickens in range(numheads + 1):
        rabbits = numheads - chickens
        if (2 * chickens + 4 * rabbits) == numlegs:
            return chickens, rabbits
    return None
#Task 4
def filter_prime(n):
    if n < 2:
        return False
    return all(n % i != 0 for i in range(2, int(n**0.5) + 1))

numbers = list(map(int, input("Enter numbers : ").split()))

prime_numbers = list(filter(lambda x: filter_prime(x), numbers))

print("Prime numbers:", prime_numbers)
# Task 5
def string_permutations(s, step=0):
    if step == len(s):
        print("".join(s))
    for i in range(step, len(s)):
        s_copy = [c for c in s]
        s_copy[step], s_copy[i] = s_copy[i], s_copy[step]
        string_permutations(s_copy, step + 1)
# Task 6
def reverse_words(sentence):
    return ' '.join(sentence.split()[::-1])
# Task 7
def has_33(nums):
    return any(nums[i] == nums[i+1] == 3 for i in range(len(nums)-1))
# Task 8
def spy_game(nums):
    code = [0, 0, 7]
    for num in nums:
        if num == code[0]:
            code.pop(0)
        if not code:
            return True
    return False
# Task 9
def sphere_volume(radius):
    from math import pi
    return (4/3) * pi * radius ** 3
# Task 10
def unique_elements(lst):
    unique_list = []
    for item in lst:
        if item not in unique_list:
            unique_list.append(item)
    return unique_list
# Task 11
def is_palindrome(word):
    return word == word[::-1]
# Task 12
def histogram(lst):
    for num in lst:
        print('*' * num)
# Task 13
import random

def guess_the_number():
    number = random.randint(1, 20)
    name = input("Hello! What is your name? ")
    print(f"Well, {name}, I am thinking of a number between 1 and 20.")
    attempts = 0
    while True:
        guess = int(input("Take a guess.\n"))
        attempts += 1
        if guess < number:
            print("Your guess is too low.")
        elif guess > number:
            print("Your guess is too high.")
        else:
            print(f"Good job, {name}! You guessed my number in {attempts} guesses!")
            break
#Task 4
from task7 import grams_to_ounces
from task8 import fahrenheit_to_celsius

print("100 grams in ounces:", grams_to_ounces(100))
print("100 Fahrenheit in Celsius:", fahrenheit_to_celsius(100))
movies = [
    {"name": "Usual Suspects", "imdb": 7.0, "category": "Thriller"},
    {"name": "Hitman", "imdb": 6.3, "category": "Action"},
    {"name": "Dark Knight", "imdb": 9.0, "category": "Adventure"},
    {"name": "The Help", "imdb": 8.0, "category": "Drama"},
    {"name": "The Choice", "imdb": 6.2, "category": "Romance"},
    {"name": "Colonia", "imdb": 7.4, "category": "Romance"},
    {"name": "Love", "imdb": 6.0, "category": "Romance"},
    {"name": "Bride Wars", "imdb": 5.4, "category": "Romance"},
    {"name": "AlphaJet", "imdb": 3.2, "category": "War"},
    {"name": "Ringing Crime", "imdb": 4.0, "category": "Crime"},
    {"name": "Joking muck", "imdb": 7.2, "category": "Comedy"},
    {"name": "What is the name", "imdb": 9.2, "category": "Suspense"},
    {"name": "Detective", "imdb": 7.0, "category": "Suspense"},
    {"name": "Exam", "imdb": 4.2, "category": "Thriller"},
    {"name": "We Two", "imdb": 7.2, "category": "Romance"}
]

def is_high_rated():
  
    movie_name = input("Enter movie name: ")
    for movie in movies:
        if movie["name"] == movie_name:
            return movie["imdb"] > 5.5
    return False

def movies_by_category():
   
    category = input("Enter category: ")
    return [movie for movie in movies if movie["category"] == category]

def average_imdb():
    
    movie_names = input("Enter movie names separated by commas: ").split(", ")
    selected_movies = [movie for movie in movies if movie["name"] in movie_names]
    if not selected_movies:
        return 0
    return sum(movie["imdb"] for movie in selected_movies) / len(selected_movies)

def average_imdb_by_category():

    category = input("Enter category: ")
    category_movies = [movie for movie in movies if movie["category"] == category]
    return average_imdb(category_movies)

def high_rated_movies(movies):
    
    return [movie for movie in movies if is_high_rated(movie)]




print(high_rated_movies(movies))
print("----------------------")
print(is_high_rated())
print("----------------------")
print(movies_by_category())
print("----------------------")
print(average_imdb())
print("----------------------")
print(average_imdb_by_category())
